Singleton1是单例模式中的饿汉模式，是线程安全的一种
Singleton2是懒汉模式如果不进行控制他不是线程安全，将方法变成同步方法可以变成线程安全的或者在静态方法内部进行控制
在创建单例模式中一般分为散步
创建私有静态本类对象
将类的默认构造函数进行私有化
创建一个返回本来对象的静态方法在方法中处理对象

使用延迟加载并且线程同步并且不用判断同步性Singleton3
一种可行的方式就是采用类级内部类，在这个类级内部类里面去创建对象实例。这样一来，
    只要不使用到这个类级内部类，那就不会创建对象实例，从而同时实现延迟加载和线程安全。


使用static修饰的内部类是类级内部类，他不需要依赖外部类的创建，在类中想使用的地方进行创建，在这个类中
    创建的静态属性和普通的静态属性是一样的，只创建一次并且是线程安全的

枚举序列化确实不会重新创建新实例,jvm保证了每个枚举实例变量的唯一性,不能使用反射创建枚举类

关于单例，我们总是应该记住：线程安全，延迟加载，序列化与反序列化安全，反射安全是很重重要的。